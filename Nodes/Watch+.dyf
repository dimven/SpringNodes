<Workspace Version="1.3.2.2480" X="154.143974240344" Y="134.500579776336" zoom="1.70391682455499" ScaleFactor="1" Name="Springs.Watch+" Description="This node that serializes the input information and presents it in a resizable text window." ID="46a3a667-ec7a-49ed-8675-ed77333ecd8e" Category="Springs.Core.View.Query">
  <NamespaceResolutionMap>
    <ClassMap partialName="Rectangle" resolvedName="Autodesk.DesignScript.Geometry.Rectangle" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Point" resolvedName="Autodesk.DesignScript.Geometry.Point" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Vector" resolvedName="Autodesk.DesignScript.Geometry.Vector" assemblyName="ProtoGeometry.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <PythonNodeModels.PythonNode guid="c476cd36-861f-4dd5-a4e9-c36fc7bfbf1e" type="PythonNodeModels.PythonNode" nickname="Python Script" x="118.307071783181" y="-1.09033150600672" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script># Copyright(c) 2017, Dimitar Venkov
# @5devene, dimitar.ven@gmail.com
# www.badmonkeys.net

import clr

clr.AddReference('System.Windows.Forms')
clr.AddReference('System.Drawing')
from System.Drawing import Point, Color, Font
from System.Windows.Forms import *
from cStringIO import StringIO

str_file = StringIO()
size1 = [30, 23] #height, width

def tolist(obj1):
	if hasattr(obj1,"__iter__"): return obj1
	else: return [obj1]

def write_str(str1, GCL, str_file=str_file, size1=size1):
	ln1 = len(str1)
	if ln1 &gt; size1[1]:
		size1[1] = ln1
	
	str_file.write("%s%s\n" % ("".join(GCL), str1) )

def list2str(l1, writeInd, GCL=None, GCint=-1, size1=size1):
	if GCL is None:
		GCL = []
	GCint += 1
	GCL.append(None)
	for i, x in enumerate(l1):
		GCL[GCint] = "[%i] " % i if writeInd else "  "
		if hasattr(x, "Id"): #is element
			write_str("%s        %i" % (x.ToString(), x.Id), GCL)
		elif hasattr(x, "__iter__"):
			if not x:
				write_str("Empty List", GCL)
			else:
				list2str(x, writeInd, GCL, GCint, size1)
		elif x is None:
			write_str("null", GCL)
		else:
			write_str(x.ToString(), GCL)
		size1[0] += 19
	GCL.pop(GCint)
	GCint -= 1

class WatchBox(Form):
	def __init__(self, t1):
		self.Text = "SpringNodes: Expandable Watch Window"
		self.BackColor = Color.FromArgb(40,40,40)
		self.ControlBox = False
		self.TopMost = True
		self.FormBorderStyle = FormBorderStyle.Sizable
		self.StartPosition = FormStartPosition.CenterScreen
		self.Resize += self.resize1
		self.text1 = None

		self.button1 = Button()
		self.button1.Text = 'Close'
		self.button1.Font = Font("Calibri", 10)
		self.button1.AutoSize = True
		self.button1.Width = 200
		self.button1.ForeColor = Color.FromArgb(234,234,234)
		self.button1.Click += self.save
		self.Controls.Add(self.button1)
		
		self.box1 = RichTextBox()
		self.box1.Multiline = True
		self.box1.Location = Point(5, 5)
		self.box1.Font = Font("Calibri", 12)
		self.box1.BackColor = Color.FromArgb(53,53,53)
		self.box1.ForeColor = Color.FromArgb(234,234,234)
		self.box1.DetectUrls = True
		self.box1.Text = t1
		self.Controls.Add(self.box1)

	def adjust_controls(self, height1, width1):
		if height1 &gt; 800:
			height1 = 800
			self.box1.ScrollBars = RichTextBoxScrollBars.Vertical
		if width1 &lt; 23 : width1 = 23
		if width1 &gt; 88: width1 = 88
		self.Width = 10 + (width1 + 2) * 9 #character width seems to vary between PCs
		self.Height = height1 + 90
		self.box1.Width = self.Width - 17
		self.box1.Height = self.Height - 80
		self.button1.Location = Point(self.Width/2 - 103, self.Height - 70)
	
	def resize1(self, sender, event):
		if self.Width &lt; 210: self.Width = 230
		if self.Height &lt; 120: self.Height = 120
		self.box1.Width = self.Width - 17
		self.box1.Height = self.Height - 80
		self.button1.Location = Point(self.Width/2 - 103, self.Height - 70)
	
	def save(self, sender, event):
		self.text1 = self.box1.Text
		self.Close()

l1 = [] if IN[0] is None else tolist(IN[0])
list2str(l1, IN[1])
str_content = str_file.getvalue()
str_file.close()

width1 = 100
form = WatchBox(str_content)
form.adjust_controls(*size1)

Application.Run(form)
OUT = form.text1
Application.Exit()
form.Dispose()</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="00aa72d1-0667-491b-ad7c-e6cb1e4634ba" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-188.182429664202" y="-2.95353589159062" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="input" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="3d9e94be-75a4-45b4-902f-61a2019e1f73" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-189.53767894051" y="53.8683978072081" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="addIndexes:bool = true" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="43a77d27-3a16-4650-9710-85700cd25a9e" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="267.065801096396" y="-1.33679561441611" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="str" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="602ac5b7-dc57-4f63-9c6b-00c98cf0ff0c" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-188.673644496303" y="112.686298096685" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="reset:bool = true" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="c476cd36-861f-4dd5-a4e9-c36fc7bfbf1e" start_index="0" end="43a77d27-3a16-4650-9710-85700cd25a9e" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="00aa72d1-0667-491b-ad7c-e6cb1e4634ba" start_index="0" end="c476cd36-861f-4dd5-a4e9-c36fc7bfbf1e" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3d9e94be-75a4-45b4-902f-61a2019e1f73" start_index="0" end="c476cd36-861f-4dd5-a4e9-c36fc7bfbf1e" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="602ac5b7-dc57-4f63-9c6b-00c98cf0ff0c" start_index="0" end="c476cd36-861f-4dd5-a4e9-c36fc7bfbf1e" end_index="2" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-38.0509095614525" eyeY="176.4728046373" eyeZ="-27.5389554370625" lookX="12.1350341297129" lookY="-172.993471480734" lookZ="-2.22952286682241" upX="-0.973236232151557" upY="0.144356194193024" upZ="0.178808931854951" />
  </Cameras>
</Workspace>