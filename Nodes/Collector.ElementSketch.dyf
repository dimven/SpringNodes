<Workspace Version="1.3.1.1736" X="306.064449550647" Y="66.698719218751" zoom="1.96524455617686" ScaleFactor="1" Name="Springs.Collector.ElementSketch" Description="Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets. Does not work with elements from linked files." ID="94050ce4-e59f-4377-933d-16326991c630" Category="Springs.Revit.Collectors">
  <NamespaceResolutionMap>
    <ClassMap partialName="Material" resolvedName="Revit.Elements.Material" assemblyName="RevitNodes.dll" />
    <ClassMap partialName="Transaction" resolvedName="Revit.Transaction.Transaction" assemblyName="RevitNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <PythonNodeModels.PythonNode guid="f8e36be0-b96f-4862-9c88-0737f835c5d3" type="PythonNodeModels.PythonNode" nickname="Python Script" x="167.220681948369" y="-1.59999999999999" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>#Copyright(c) 2016, Dimitar Venkov
# @5devene, dimitar.ven@gmail.com

import clr
import math

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)

clr.AddReference("RevitAPI")
from Autodesk.Revit.DB import *

def tolist(obj1):
	if hasattr(obj1,"__iter__"): return obj1
	else: return [obj1]

elements = UnwrapElement(tolist(IN[0]))
getModel = IN[1]

accepted_mc = "Autodesk.Revit.DB.ModelLine, Autodesk.Revit.DB.ModelArc, Autodesk.Revit.DB.ModelEllipse, Autodesk.Revit.DB.ModelHermiteSpline, Autodesk.Revit.DB.ModelNurbSpline"

def almost_eq(line, mc):
	line2 = mc.Location.Curve
	xyz1 = line.Evaluate(0.5, True)
	if not line2.IsBound:
		xyz2 = line2.Center
		try: xyz1 = line.Center
		except: pass
	else:
		xyz2 = line2.Evaluate(0.5, True)
	if xyz1.DistanceTo(xyz2) &lt;= 0.0001:
		return True
	else:
		return False

def clean1(l1):
	for i in xrange(len(l1) ):
		l1[i] = [x for x in l1[i] if x != None]
	return l1

def getSketch(el1):
	try:
		sk1 = doc.GetElement(ElementId(el1.Id.IntegerValue - 1) )
	except:
		sk1 = None
	if not getModel and sk1 is not None and sk1.GetType().ToString() == 'Autodesk.Revit.DB.Sketch':
		profile = sk1.Profile
	else:
		t1 = SubTransaction(doc)
		t1.Start()
		deleted = doc.Delete(el1.Id)
		t1.RollBack()
		
		profile, mc = CurveArrArray(), []
		for d in deleted:
			test_el = doc.GetElement(d)
			el_type = test_el.GetType().ToString()
			if el_type == "Autodesk.Revit.DB.Sketch":
				profile = test_el.Profile
				if not getModel:
					break
			elif getModel and el_type in accepted_mc :
				mc.append(test_el)

	ordered_mc = [ [None] * i.Size for i in profile] if getModel else []
	curves = [ [None] * i.Size for i in profile]
	for i in xrange(profile.Size):
		for j in xrange(profile[i].Size):
			curves[i][j] = profile[i][j].ToProtoType()
			if getModel:
				for k in xrange(len(mc)):
					if almost_eq(profile[i][j], mc[k]):
						ordered_mc[i][j] = mc[k].ToDSType(True)
						del mc[k]
						break
						
	return curves, clean1(ordered_mc)

TransactionManager.Instance.EnsureInTransaction(doc)
result = map(getSketch, elements)
TransactionManager.Instance.TransactionTaskDone()
OUT = [r[0] for r in result], [r[1] for r in result]</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="165c5afd-8d3b-4475-adce-a02845f3edbf" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="0" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="element:var[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="52c75ec0-2e55-4aa6-8208-ad72ae18a023" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-157.6" y="59.6" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="fetchModelCurves:bool = false" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="e7f0e3b3-7cb8-4cfa-b74a-d9f2ae9ec80d" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="484.2" y="-5.59999999999999" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="curves" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="094e1ff9-993b-4f1b-acbd-9877a0ecb76d" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="307.2" y="-2.20000000000002" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="res[0];&#xA;res[1];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="cd6f4ec2-2614-4c1f-a126-dc0bfcc5d503" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="483.6" y="51.6" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="model curves" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="ea667445-ec60-4b75-a1da-ec882da4db60" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-75.2445233808256" y="118.427785318653" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="refresh:bool = true" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="f8e36be0-b96f-4862-9c88-0737f835c5d3" start_index="0" end="094e1ff9-993b-4f1b-acbd-9877a0ecb76d" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="165c5afd-8d3b-4475-adce-a02845f3edbf" start_index="0" end="f8e36be0-b96f-4862-9c88-0737f835c5d3" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="52c75ec0-2e55-4aa6-8208-ad72ae18a023" start_index="0" end="f8e36be0-b96f-4862-9c88-0737f835c5d3" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="094e1ff9-993b-4f1b-acbd-9877a0ecb76d" start_index="0" end="e7f0e3b3-7cb8-4cfa-b74a-d9f2ae9ec80d" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="094e1ff9-993b-4f1b-acbd-9877a0ecb76d" start_index="1" end="cd6f4ec2-2614-4c1f-a126-dc0bfcc5d503" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ea667445-ec60-4b75-a1da-ec882da4db60" start_index="0" end="f8e36be0-b96f-4862-9c88-0737f835c5d3" end_index="2" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="28.1210126766283" eyeY="51.1483487654114" eyeZ="53.2504072098136" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>