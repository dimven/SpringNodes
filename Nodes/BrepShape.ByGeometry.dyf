<Workspace Version="1.3.1.1736" X="-36.7634813840651" Y="58.792442124992" zoom="1.703916824555" ScaleFactor="1" Name="Springs.BrepShape.ByGeometry" Description="Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Usies the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model." ID="43629155-311e-4c61-b15f-5c14be2e02c3" Category="Springs.Revit.DirectShape">
  <NamespaceResolutionMap>
    <ClassMap partialName="Point" resolvedName="Autodesk.DesignScript.Geometry.Point" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Cuboid" resolvedName="Autodesk.DesignScript.Geometry.Cuboid" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="UV" resolvedName="Autodesk.DesignScript.Geometry.UV" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Curve" resolvedName="Autodesk.DesignScript.Geometry.Curve" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Polygon" resolvedName="Autodesk.DesignScript.Geometry.Polygon" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Circle" resolvedName="Autodesk.DesignScript.Geometry.Circle" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Plane" resolvedName="Autodesk.DesignScript.Geometry.Plane" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Vector" resolvedName="Autodesk.DesignScript.Geometry.Vector" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Sphere" resolvedName="Autodesk.DesignScript.Geometry.Sphere" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Autodesk.Solid" resolvedName="Autodesk.DesignScript.Geometry.Solid" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Autodesk.DesignScript.Geometry.Solid" resolvedName="Autodesk.DesignScript.Geometry.Solid" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Surface.PerimeterCurves" resolvedName="Autodesk.DesignScript.Geometry.Surface" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Rectangle" resolvedName="Autodesk.DesignScript.Geometry.Rectangle" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Curve.ByParameterLineOnSurface" resolvedName="Autodesk.DesignScript.Geometry.Curve" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Category" resolvedName="Revit.Elements.Category" assemblyName="RevitNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <PythonNodeModels.PythonNode guid="cec336e2-b902-4c79-922e-af8ed9d955ca" type="PythonNodeModels.PythonNode" nickname="Python Script" x="258.227645314355" y="22.5177185968757" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="4">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <Script># Copyright(c) 2017, Dimitar Venkov
# @5devene, dimitar.ven@gmail.com
# www.badmonkeys.net

import clr
import System
from itertools import repeat

pf_path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)
import sys
sys.path.append("%s\IronPython 2.7\Lib" %pf_path)
import traceback

clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

clr.AddReference("RevitServices")
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)

clr.AddReference("RevitAPI")
import Autodesk.Revit.DB as RVT

def tolist(obj1):
	if hasattr(obj1,"__iter__"): return obj1
	else: return [obj1]

def PadLists(lists):
	len1 = len(lists[0])
	for i in xrange(1,len(lists)):
		len2 = len(lists[i])
		if len2 == len1 : continue
		elif len2 &gt; len1: lists[i] = lists[i][:len1]
		else : lists[i].extend(repeat(lists[i][-1],len1 - len2))
	return lists

def NewDS_R17(geom1, cat1, name1, mat1): 
	toDispose = []
	try:
		edg_enum = dict()
		faces = geom1.Faces
		br1 = RVT.BRepBuilder(RVT.BRepType.OpenShell)
		toDispose.append(br1)
		for f in faces:
			s1 = f.SurfaceGeometry()
			toDispose.append(s1)
			isPlanar = Curve.ByParameterLineOnSurface(s1, UV.ByCoordinates(0,0),
					UV.ByCoordinates(1,1) ).IsPlanar
			if isPlanar:
				o1 = s1.PointAtParameter(0.5,0.5).ToXyz(True)
				v1 = s1.NormalAtParameter(0.5,0.5).ToXyz(True)
				sf1 = RVT.BRepBuilderSurfaceGeometry.Create(RVT.Plane.
						CreateByNormalAndOrigin(v1, o1), None)
				isFlipped = False
			else:
				ns1 = s1.ToNurbsSurface()
				toDispose.append(ns1)
				isFlipped = s1.NormalAtParameter(0.5, 0.5).Dot(ns1.
					NormalAtParameter(0.5, 0.5) ) &lt; 0
				pts1 = [j.ToXyz(True) for i in ns1.ControlPoints() for j in i ]
				sf1 = RVT.BRepBuilderSurfaceGeometry.CreateNURBSSurface(ns1.DegreeU,
					ns1.DegreeV, ns1.UKnots(), ns1.VKnots(), pts1, False, None)
			toDispose.append(sf1)
			sfId = br1.AddFace(sf1, isFlipped)
			if mat1 is not None:
				br1.SetFaceMaterialId(sfId, mat1.Id)
			for lp in f.Loops:
				lp1 = br1.AddLoop(sfId)
				for ce in lp.CoEdges:
					edg = ce.Edge
					if edg in edg_enum:
						eId = edg_enum[edg]
					else:
						c0 = edg.CurveGeometry
						toDispose.append(c0)
						try:
							c1 = c0.ToRevitType(True)
						except:
							n = len(c0.ToNurbsCurve().ControlPoints() )
							pts = [c0.PointAtParameter(1.0/n * j) for j in xrange(n + 1)]
							toDispose.extend(pts)
							c1 = NurbsCurve.ByPoints(pts).ToRevitType(True)
						toDispose.append(c1)
						e1 = RVT.BRepBuilderEdgeGeometry.Create(c1)
						toDispose.append(e1)
						eId = br1.AddEdge(e1)
						edg_enum.Add(edg, eId)
					br1.AddCoEdge(lp1, eId, ce.Reversed)
			br1.FinishLoop(lp1)
			br1.FinishFace(sfId)
		result = br1.Finish()
		if result == RVT.BRepBuilderOutcome.Success:
			if cat1 is None or not RVT.DirectShape.IsValidCategoryId(cat1.Id, doc):
				cat1Id = RVT.ElementId(RVT.BuiltInCategory.OST_GenericModel)
			else:
				cat1Id = cat1.Id
			if name1 in dst_enum: #definition exists
				old_type = dst_enum[name1]
				old_type.SetShape(br1)
				fec1 = RVT.FilteredElementCollector(doc).OfClass(RVT.DirectShape).WhereElementIsNotElementType()
				insts = [i for i in fec1 if i.GetTypeId().Equals(old_type.Id)]
				if insts:
					ds1 = insts[0]
				else:
					dsLib.AddDefinitionType(name1, old_type.Id)
					ds1 = RVT.DirectShape.CreateElementInstance(doc, old_type.Id, cat1Id, name1, tf1)
					ds1.SetTypeId(old_type.Id)
			else:
				dsType1 = RVT.DirectShapeType.Create(doc, name1, cat1Id)
				dsType1.SetShape(br1)
				dsLib.AddDefinitionType(name1, dsType1.Id)
				ds1 = RVT.DirectShape.CreateElementInstance(doc, dsType1.Id, cat1Id, name1, tf1)
				ds1.SetTypeId(dsType1.Id)
			
			return ueWrapper.Invoke(None, (ds1, False) )
		else:
			return result
	except:
		return traceback.format_exc()
	finally:
		for i in toDispose: i.Dispose()

solids = tolist(IN[0])
cat = tolist(IN[1])
cat = [UnwrapElement(c) for c in cat]
names = tolist(IN[2])
mat = tolist(IN[3])
mat = [UnwrapElement(m) for m in mat]

dsLib = RVT.DirectShapeLibrary.GetDirectShapeLibrary(doc)
tf1 = RVT.Transform.Identity

dst_fec = RVT.FilteredElementCollector(doc).OfClass(RVT.DirectShapeType)
dst_enum = dict([(RVT.Element.Name.__get__(i), i) for i in dst_fec])

ueWrapper = None
wrappers = clr.GetClrType(Revit.Elements.ElementWrapper).GetMethods()
for w in wrappers:
	if w.ToString().startswith("Revit.Elements.UnknownElement"):
		ueWrapper = w
		break

if len(solids) == len(names):
	if not len(solids) == len(cat) == len(mat):
		padded = PadLists([solids, cat, mat])
		cat, mat = padded[1:]
	TransactionManager.Instance.EnsureInTransaction(doc)
	OUT = map(NewDS_R17, solids, cat, names, mat)
	TransactionManager.Instance.TransactionTaskDone()
else : OUT = "Make sure that each geometry\nobject has a unique type name."</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="0543165c-297a-446f-aa00-426a33395c03" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="62.2867732199499" y="-10.3903315060067" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="geometry:var[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="f9efbc94-b8b2-4b81-be1d-f3f2528f3178" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="5.2988118804995" y="47.4318167624141" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="category:var[] = null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="5cc3b584-6703-4dea-aa86-6d62948ceb48" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="95.2882700073807" y="104.387193266993" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="name:var[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="f27b0765-1dc6-4485-9e97-ce7f84370df0" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="398.615588042379" y="23.7352505959175" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="DirectShape" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="88711c82-f5fb-43f8-bf3f-607a9a1603c4" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="3.77986139724089" y="161.086516159817" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="material:var[] = null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="cec336e2-b902-4c79-922e-af8ed9d955ca" start_index="0" end="f27b0765-1dc6-4485-9e97-ce7f84370df0" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0543165c-297a-446f-aa00-426a33395c03" start_index="0" end="cec336e2-b902-4c79-922e-af8ed9d955ca" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f9efbc94-b8b2-4b81-be1d-f3f2528f3178" start_index="0" end="cec336e2-b902-4c79-922e-af8ed9d955ca" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="5cc3b584-6703-4dea-aa86-6d62948ceb48" start_index="0" end="cec336e2-b902-4c79-922e-af8ed9d955ca" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="88711c82-f5fb-43f8-bf3f-607a9a1603c4" start_index="0" end="cec336e2-b902-4c79-922e-af8ed9d955ca" end_index="3" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="28.1210126766283" eyeY="51.1483487654114" eyeZ="53.2504072098136" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>