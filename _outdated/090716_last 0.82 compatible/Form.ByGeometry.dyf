<Workspace Version="0.8.2.2392" X="19.8027856748884" Y="227.924679060115" zoom="1.3231529419852" Name="Form.ByGeometry" Description="Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default." ID="268c3e45-41fa-4d94-a91c-1a45a41b45aa" Category="SpringNodes.Revit.Forms">
  <NamespaceResolutionMap />
  <Elements>
    <DSIronPythonNode.PythonNode guid="5b20d6d5-cea0-41c5-bfc5-69ce2f727abf" type="DSIronPythonNode.PythonNode" nickname="Python Script" x="249.717208630228" y="0.755770529822257" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" inputcount="2">
      <Script>#Copyright(c) 2016, Dimitar Venkov
# @5devene, dimitar.ven@gmail.com
import clr
import System
from System.Collections.Generic import *

from itertools import repeat

pf_path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)
import sys
sys.path.append("%s\IronPython 2.7\Lib" %pf_path)
import traceback

clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)

clr.AddReference("RevitAPI")
from Autodesk.Revit.DB import *

def tolist(obj1):
	if hasattr(obj1,"__iter__"): return obj1
	else: return [obj1]

def output1(l1):
	if len(l1) == 1: return l1[0]
	else: return l1

def PadLists(lists):
	len1 = len(lists[0])
	for i in xrange(1,len(lists)):
		len2 = len(lists[i])
		if len2 == len1 : continue
		elif len2 &gt; len1: lists[i] = lists[i][:len1]
		else : lists[i].extend(repeat(lists[i][-1],len1 - len2))
	return lists

def NewForm(s1, isVoid1):
	message = None
	temp_path = System.IO.Path.GetTempPath()
	rand_name = System.Guid.NewGuid().ToString()
	sat_path = "%s%s.sat" % (temp_path, rand_name)
	try:
		if factor != 1:
			s1 = s1.Scale(factor)
		sat1 = Geometry.ExportToSAT(s1, sat_path)
		satOpt = SATImportOptions()
		satOpt.Placement = ImportPlacement.Origin
		satOpt.Unit = ImportUnit.Foot
		satId = doc.Import(sat1, satOpt, view1)
		opt1 = Options()
		opt1.ComputeReferences = True
		el1 = doc.GetElement(satId)
		geom1 = el1.get_Geometry(opt1)
		enum = geom1.GetEnumerator()
		enum.MoveNext()
		geom2 = enum.Current.GetInstanceGeometry()
		enum2 = geom2.GetEnumerator()
		enum2.MoveNext()
		s1 = enum2.Current
		doc.Delete(satId)
		System.IO.File.Delete(sat_path)
	except:
		message = traceback.format_exc()
		pass
	if message == None:
		try:
			s2 = FreeFormElement.Create(doc,s1)
			if isVoid1:
				void_par = s2.get_Parameter(BuiltInParameter.ELEMENT_IS_CUTTING)
				void_par.Set(1)
			return s2.ToDSType(False)
		except:
			message = traceback.format_exc()
			return message
	else : return message

geom, isVoid = tolist(IN[0]),  tolist(IN[1])

acceptable_views = ("ThreeD", "FloorPlan", "EngineeringPlan", "CeilingPlan", "Elevation", "Section")
view_fec = FilteredElementCollector(doc).OfClass(View)
view1 = None
for v in view_fec:
	if str(v.ViewType) in acceptable_views and not v.IsTemplate:
		view1 = v
		break
units = doc.GetUnits().GetFormatOptions(UnitType.UT_Length).DisplayUnits
factor = UnitUtils.ConvertToInternalUnits(1,units)
if doc.IsFamilyDocument:
	if len(geom) == len(isVoid):
		TransactionManager.Instance.EnsureInTransaction(doc)
		OUT = output1(map(NewForm, geom, isVoid))
		TransactionManager.Instance.TransactionTaskDone()
	else:
		padded = PadLists([geom,isVoid])
		p_isVoid = padded[1]
		TransactionManager.Instance.EnsureInTransaction(doc)
		OUT = output1(map(NewForm, geom, p_isVoid))
		TransactionManager.Instance.TransactionTaskDone()
else : OUT = "Forms can only exist in family documents"</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.Symbol guid="eae70b5f-0692-4372-ab80-d18a7b1f5adb" type="Dynamo.Nodes.Symbol" nickname="Input" x="127.34323536274" y="0.57361817730964" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True">
      <Symbol value="geometry" />
    </Dynamo.Nodes.Symbol>
    <Dynamo.Nodes.Output guid="6b741902-d5d8-4efe-b621-e8d7fb813375" type="Dynamo.Nodes.Output" nickname="Output" x="419.171854779899" y="-0.57361817730964" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False">
      <Symbol value="Form" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Symbol guid="f6688745-2d9a-436b-8ce6-8f61c0f2b25f" type="Dynamo.Nodes.Symbol" nickname="Input" x="1.74932482264768" y="62.7646438888043" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True">
      <Symbol value="isVoid:var[]..[] = false" />
    </Dynamo.Nodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="5b20d6d5-cea0-41c5-bfc5-69ce2f727abf" start_index="0" end="6b741902-d5d8-4efe-b621-e8d7fb813375" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="eae70b5f-0692-4372-ab80-d18a7b1f5adb" start_index="0" end="5b20d6d5-cea0-41c5-bfc5-69ce2f727abf" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="f6688745-2d9a-436b-8ce6-8f61c0f2b25f" start_index="0" end="5b20d6d5-cea0-41c5-bfc5-69ce2f727abf" end_index="1" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="background_preview" eyeX="10" eyeY="15" eyeZ="10" lookX="-10" lookY="-10" lookZ="-10" />
  </Cameras>
</Workspace>