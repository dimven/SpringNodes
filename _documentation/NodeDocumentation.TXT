- <a href="#core">Core</a>
  - <a href="#core_file">File</a>
  - <a href="#core_list">List</a>
  - <a href="#core_math">Math</a>
  - <a href="#core_object">Object</a>
  - <a href="#core_string">String</a>
  - <a href="#core_units">Units</a>
  - <a href="#core_view">View</a>
- <a href="#geometry">Geometry</a>
- <a href="#revit">Revit</a>
  - <a href="#revit_collectors">Collectors</a>
  - <a href="#revit_color">Color</a>
  - <a href="#revit_directshape">DirectShape</a>
  - <a href="#revit_document">Document</a>
  - <a href="#revit_element">Element</a>
  - <a href="#revit_elementtype">ElementType</a>
  - <a href="#revit_familyinstance">FamilyInstance</a>
  - <a href="#revit_form">Form</a>
  - <a href="#revit_opening">Opening</a>
  - <a href="#revit_selection">Selection</a>
  - <a href="#revit_utility">Utility</a>
  - <a href="#revit_views">Views</a>

## <a name="core">Core</a>
### <a name="core_file">File</a>
#### <a name="core_file_query">Query</a>
**<a name="file.size">File.Size</a>**<br>Outputs the the file size in kilobytes or megabytes. Provide a file path as a string. Set kbOnly to true for a consistent output.<br>*Input(s):* path (var[]), kbOnly (bool - false)<br>*Output(s):* size<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/File.Size.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/File.Size.dyf</a><br>

### <a name="core_list">List</a>
**<a name="filter.byselection">Filter.BySelection</a>**<br>Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation.<br>*Input(s):* list, names (var[]..[] - null), customMsg (string - "Choose the objects you'd like to filter), checkAll (bool - false), reset (bool - true)<br>*Output(s):* bool<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Filter.BySelection.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Filter.BySelection.dyf</a><br>

**<a name="list.dragdropreorder">List.DragDropReorder</a>**<br>Press and hold on an item to move it up or down the list. To confirm and close the window, select &quot;Save Order&quot;. The optional names input will override the object representation.<br>*Input(s):* list, names (var[]..[] - null), customMsg (string - "Reorder the items by dragging &amp; dropping them."), reset (bool - true)<br>*Output(s):* list<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#python script">Python Script</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/List.DragDropReorder.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/List.DragDropReorder.dyf</a><br>

**<a name="list.dropdown">List.DropDown</a>**<br>Selects one list item by a drop-down combo box. The optional names input will override the object representation.<br>*Input(s):* list, names (var[]..[] - null), customMsg (string - "Choose an item and press Select"), reset (bool - true)<br>*Output(s):* selection<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/List.DropDown.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/List.DropDown.dyf</a><br>

**<a name="list.dropfirstlast">List.DropFirstLast</a>**<br>Removes the first and last items from the list<br>*Input(s):* list (var[]..[])<br>*Output(s):* list, F&amp;L<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/List.DropFirstLast.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/List.DropFirstLast.dyf</a><br>

**<a name="list.everyother">List.EveryOther</a>**<br>Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , &quot;2&quot; will be paired up only with &quot;1&quot; and &quot;3&quot; and will not be paired up with itself.<br>*Input(s):* list (var[]..[])<br>*Output(s):* lists<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#list.removeitematindex">List.RemoveItemAtIndex</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/List.EveryOther.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/List.EveryOther.dyf</a><br>

**<a name="list.getevenodd">List.GetEvenOdd</a>**<br>Gets the even and odd indices from the list.<br>*Input(s):* list (var[]..[])<br>*Output(s):* even, odd<br>*Nested Custom Node(s):* <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/List.GetEvenOdd.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/List.GetEvenOdd.dyf</a><br>

**<a name="list.mergebyboolmask">List.MergeByBoolMask</a>**<br>Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list.<br>*Input(s):* In (var[]..[]), Out (var[]..[]), mask (var[]..[])<br>*Output(s):* list<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/List.MergeByBoolMask.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/List.MergeByBoolMask.dyf</a><br>

**<a name="list.randomise&amp;divide">List.Randomise&amp;Divide</a>**<br>Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further.<br>*Input(s):* list (var[]..[]), ratios, seed (double - 1)<br>*Output(s):* lists<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#python script">Python Script</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/List.Randomise&Divide.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/List.Randomise&Divide.dyf</a><br>

**<a name="list.split">List.Split</a>**<br>Splits a list at the desired length<br>*Input(s):* list (var[]..[]), amount (int)<br>*Output(s):* list1, list2<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/List.Split.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/List.Split.dyf</a><br>

**<a name="list.subpairs">List.Subpairs</a>**<br>Pair up each list item with the next one and drop the list item.<br>*Input(s):* list (var[]..[])<br>*Output(s):* lists<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/List.Subpairs.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/List.Subpairs.dyf</a><br>

**<a name="nullallindicesof">NullAllIndicesOf</a>**<br>list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow.<br>*Input(s):* list (var[]), value (var)<br>*Output(s):* indices<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/NullAllIndicesOf.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/NullAllIndicesOf.dyf</a><br>

**<a name="nullindexof">NullIndexOf</a>**<br>Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow.<br>*Input(s):* list (var[]), element (var)<br>*Output(s):* index<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/NullIndexOf.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/NullIndexOf.dyf</a><br>

**<a name="nullreorder">NullReorder</a>**<br>Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow.<br>*Input(s):* list (var[]), indices (var[])<br>*Output(s):* list<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/NullReorder.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/NullReorder.dyf</a><br>

**<a name="nullsetdifference">NullSetDifference</a>**<br>Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow.<br>*Input(s):* list1 (var[]), list2 (var[])<br>*Output(s):* list<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/NullSetDifference.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/NullSetDifference.dyf</a><br>

**<a name="dictionary.bykeysvalues">Dictionary.ByKeysValues</a>**<br>Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)&#xD;&#xA;The search keys list will provide the corresponding value to the input key.<br>*Input(s):* keys (var[]), values (var[]..[]), searchKeys (var[]), defaultValue (var[]..[] - null)<br>*Output(s):* result<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Dictionary.ByKeysValues.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Dictionary.ByKeysValues.dyf</a><br>

### <a name="core_math">Math</a>
#### <a name="core_math_actions">Actions</a>
**<a name="math.almostequal">Math.AlmostEqual</a>**<br>Checks if a number is almost equal to a value with a specified tollerance.<br>*Input(s):* a (var), b (var), tolerance (double - 0.0001)<br>*Output(s):* bool<br>*Nested Custom Node(s):* <a href="#input">Input</a>, <a href="#code block">Code Block</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Math.AlmostEqual.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Math.AlmostEqual.dyf</a><br>

### <a name="core_object">Object</a>
#### <a name="core_object_actions">Actions</a>
**<a name="filter.byclassname">Filter.ByClassName</a>**<br>Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class.<br>*Input(s):* object (var[]), optionalName (var[] - null), className (var[])<br>*Output(s):* bool<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Filter.ByClassName.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Filter.ByClassName.dyf</a><br>

### <a name="core_string">String</a>
#### <a name="core_string_actions">Actions</a>
**<a name="number.tostring">Number.ToString</a>**<br>Converts the input number(s) to string. You can optionally limit the number of digits.<br>*Input(s):* num (var[]), digits (int - null)<br>*Output(s):* str<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Number.ToString.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Number.ToString.dyf</a><br>

### <a name="core_units">Units</a>
**<a name="feet2fraction">Feet2Fraction</a>**<br>Converts a decimal foot value to a fractional foot/inch string.<br>*Input(s):* number (var)<br>*Output(s):* fraction(str)<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#springs.number.tostring">Number.ToString</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Feet2Fraction.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Feet2Fraction.dyf</a><br>

**<a name="fraction2feet">Fraction2Feet</a>**<br>Converts a fractioned feet /inch string value into a decimal foot value.<br>*Input(s):* fraction (var)<br>*Output(s):* number<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Fraction2Feet.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Fraction2Feet.dyf</a><br>

### <a name="core_view">View</a>
**<a name="watch+">Watch+</a>**<br>This node that serializes the input information and presents it in a resizable text window.<br>*Input(s):* input, addIndexes (bool - true), reset (bool - true)<br>*Output(s):* str<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Watch+.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Watch+.dyf</a><br>

## <a name="geometry">Geometry</a>
**<a name="polygon.isrectangular">Polygon.IsRectangular</a>**<br>Determines if a polygon (or a polycurve) is rectangular or square. If you want to differenciate between square and rectangular polys, use the XOR output.<br>*Input(s):* poly (var[])<br>*Output(s):* isSquare, isRectangle, XOR<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Polygon.IsRectangular.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Polygon.IsRectangular.dyf</a><br>

**<a name="boundingbox.2drectangle">BoundingBox.2dRectangle</a>**<br>Returns a 2d rectangle from a bounding box<br>*Input(s):* boundingBox (BoundingBox)<br>*Output(s):* rectangle<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/BoundingBox.2dRectangle.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/BoundingBox.2dRectangle.dyf</a><br>

**<a name="boundingbox.midpoint">BoundingBox.MidPoint</a>**<br>Fetches the mid point of the bounding box.<br>*Input(s):* boundingBox (BoundingBox)<br>*Output(s):* point<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/BoundingBox.MidPoint.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/BoundingBox.MidPoint.dyf</a><br>

**<a name="boundingbox.scale">BoundingBox.Scale</a>**<br>Scales the bounding box in three dimensions according to it's center.<br>*Input(s):* boundingBox (BoundingBox), xAmmount (double - 1), yAmmount (double - 1), zAmmount (double - 1)<br>*Output(s):* boundingBox<br>*Nested Custom Node(s):* <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/BoundingBox.Scale.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/BoundingBox.Scale.dyf</a><br>

**<a name="closedcurve.offset+">ClosedCurve.Offset+</a>**<br>Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs.<br>*Input(s):* curve (var), distance (double)<br>*Output(s):* internal offset, external offset<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/ClosedCurve.Offset+.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/ClosedCurve.Offset+.dyf</a><br>

**<a name="curve.offset+">Curve.Offset+</a>**<br>Offsets a curve towards the specified point<br>*Input(s):* curve (var), distance (var), point (var)<br>*Output(s):* curve<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#geometry.distanceto">Geometry.DistanceTo</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Curve.Offset+.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Curve.Offset+.dyf</a><br>

**<a name="curveloop.simplify">CurveLoop.Simplify</a>**<br>Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line.<br>*Input(s):* curveLoop (var[])<br>*Output(s):* curveLoop<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/CurveLoop.Simplify.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/CurveLoop.Simplify.dyf</a><br>

**<a name="delaunay2d.bypoints">Delaunay2D.ByPoints</a>**<br>Create a delaunay triangulation of a set of planar points. You can get the result as points or as lines.<br>*Input(s):* points (var[]), asPoints (bool - false)<br>*Output(s):* pts/lines<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Delaunay2D.ByPoints.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Delaunay2D.ByPoints.dyf</a><br>

**<a name="geometry.extents">Geometry.Extents</a>**<br>Gets the dimensions of the geometry's bounding box.<br>*Input(s):* geometry (var)<br>*Output(s):* width, length, height<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Geometry.Extents.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Geometry.Extents.dyf</a><br>

**<a name="geometry.groupbydistance">Geometry.GroupByDistance</a>**<br>Splits the list of geometry elements into groups if the distance between them is less than the provided margin.<br>*Input(s):* geometry (var[]), margin (double - 1)<br>*Output(s):* geometry[][]<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Geometry.GroupByDistance.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Geometry.GroupByDistance.dyf</a><br>

**<a name="geometry.indexbydistance">Geometry.IndexByDistance</a>**<br>Provides the index of the closest or farthest geometry. Should prove faster than getting the geometry and finding its index in two separate operations.<br>*Input(s):* geometry (var[]), other (var[]), isClosest (bool - true)<br>*Output(s):* index, distance<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#output">Output</a>, <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Geometry.IndexByDistance.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Geometry.IndexByDistance.dyf</a><br>

**<a name="geometry.readtag">Geometry.ReadTag</a>**<br>Design script geometry can store a &lt;string, object&gt; dictionary for the duration of the active graph. If no parameter with the active name is found, a null value will be returned instead.<br>*Input(s):* geometry (Geometry), tagName (string)<br>*Output(s):* value<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Geometry.ReadTag.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Geometry.ReadTag.dyf</a><br>

**<a name="geometry.splitrecursively">Geometry.SplitRecursively</a>**<br>Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split.<br>*Input(s):* geometry (var), tools (var[]), pickPoint (var)<br>*Output(s):* geometry<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Geometry.SplitRecursively.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Geometry.SplitRecursively.dyf</a><br>

**<a name="geometry.writetag">Geometry.WriteTag</a>**<br>Design script geometry can store a &lt;string, object&gt; dictionary for the duration of the active graph. You can store a name/value pair and retrieve it further down the graph.<br>*Input(s):* geometry (Geometry), tagName (string), value (var), override (bool - true)<br>*Output(s):* geometry, setPreviously<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#output">Output</a>, <a href="#input">Input</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Geometry.WriteTag.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Geometry.WriteTag.dyf</a><br>

**<a name="line.straightenxy">Line.StraightenXY</a>**<br>Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative.<br>*Input(s):* line (var), margin (double - 5000)<br>*Output(s):* line<br>*Nested Custom Node(s):* <a href="#output">Output</a>, <a href="#code block">Code Block</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Line.StraightenXY.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Line.StraightenXY.dyf</a><br>

**<a name="line.straightenz">Line.StraightenZ</a>**<br>Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative.<br>*Input(s):* line (var), margin (double - 5000)<br>*Output(s):* line<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Line.StraightenZ.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Line.StraightenZ.dyf</a><br>

**<a name="lineloop.merge">LineLoop.Merge</a>**<br>Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean.<br>*Input(s):* lines (var[]), margin (double - 100)<br>*Output(s):* lines, ordered, success<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#python script">Python Script</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/LineLoop.Merge.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/LineLoop.Merge.dyf</a><br>

**<a name="mesh.topolysurface">Mesh.ToPolySurface</a>**<br>Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores.<br>*Input(s):* mesh (var[])<br>*Output(s):* PolySurface<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Mesh.ToPolySurface.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Mesh.ToPolySurface.dyf</a><br>

**<a name="mesh.totoolkitmesh">Mesh.ToToolkitMesh</a>**<br>Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first.<br>*Input(s):* mesh (var)<br>*Output(s):* tkMesh<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Mesh.ToToolkitMesh.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Mesh.ToToolkitMesh.dyf</a><br>

**<a name="n-hedron.byoriginvector">N-hedron.ByOriginVector</a>**<br>Creates a multi-sided poyhedron with defined side length and total height.<br>*Input(s):* origin (Point - Point.Origin()), axis (Vector - Vector.ZAxis()), sides (int - 3), length (double - 10), height (double - 8)<br>*Output(s):* solid<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/N-hedron.ByOriginVector.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/N-hedron.ByOriginVector.dyf</a><br>

**<a name="planarface.fixdomain">PlanarFace.FixDomain</a>**<br>Corrects the surface domain of a 3 or 4 point planar face extracted from Revit.<br>*Input(s):* surf (var)<br>*Output(s):* surface<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/PlanarFace.FixDomain.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/PlanarFace.FixDomain.dyf</a><br>

**<a name="point.pullontoplane">Point.PullOntoPlane</a>**<br>Pulls (projects) the point onto the input plane, following the plane normal.<br>*Input(s):* point (var), plane (var)<br>*Output(s):* point<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Point.PullOntoPlane.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Point.PullOntoPlane.dyf</a><br>

**<a name="points.convexhull2d">Points.ConvexHull2D</a>**<br>Computes the XY convex hull of a given set of points based on the monotone chain algorithm.<br>*Input(s):* points (var[]), elevation (double - 0)<br>*Output(s):* points<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Points.ConvexHull2D.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Points.ConvexHull2D.dyf</a><br>

**<a name="points.pruneduplicates+">Points.PruneDuplicates+</a>**<br>An alternative to the built in node, that performs faster at the price of loosing the order of the points. All floating point valies are rounded to the nearest 4 decimal points. You can optionally remove duplicate Z values by setting &quot;keepDuplicateZ&quot; to false.<br>*Input(s):* points (var[]), keepDuplicateZ (bool - true)<br>*Output(s):* points<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Points.PruneDuplicates+.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Points.PruneDuplicates+.dyf</a><br>

**<a name="polycurve.arcchamfer">PolyCurve.ArcChamfer</a>**<br>Symmetrically chamfers the corners of the polycurve by the designated distance and close with tangent arcs.<br>*Input(s):* polycurve (var), distance (var), flip (bool - false)<br>*Output(s):* polycurve<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/PolyCurve.ArcChamfer.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/PolyCurve.ArcChamfer.dyf</a><br>

**<a name="polycurve.chamfer">PolyCurve.Chamfer</a>**<br>Symmetrically chamfers the corners of the polycurve by the designated distance<br>*Input(s):* polycurve (var), distance (var)<br>*Output(s):* polycurve<br>*Nested Custom Node(s):* <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/PolyCurve.Chamfer.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/PolyCurve.Chamfer.dyf</a><br>

**<a name="polycurve.fillet+">PolyCurve.Fillet+</a>**<br>Fillet a polycurve in its plane. Unlike the built in node, this works in both in the CW and the CCW direction.<br>*Input(s):* polycurve (var), radius (var)<br>*Output(s):* polycurve<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/PolyCurve.Fillet+.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/PolyCurve.Fillet+.dyf</a><br>

**<a name="polygon.2darea">Polygon.2DArea</a>**<br>Returns the planar area of the input polygon(s). Not accurate for self-intersecting polys.<br>*Input(s):* polygon (var[])<br>*Output(s):* area<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Polygon.2DArea.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Polygon.2DArea.dyf</a><br>

**<a name="polygon.3darea">Polygon.3DArea</a>**<br>Returns the planar area of the input polygon(s) in euclidean space. Not accurate for self-intersecting polys.<br>*Input(s):* polygon (var[])<br>*Output(s):* area<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Polygon.3DArea.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Polygon.3DArea.dyf</a><br>

**<a name="polygon.containmenttest+">Polygon.ContainmentTest+</a>**<br>A less accurate method that should perform faster than the built-in node for large data sets.<br>*Input(s):* polygon (var), points (var[])<br>*Output(s):* bool<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Polygon.ContainmentTest+.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Polygon.ContainmentTest+.dyf</a><br>

**<a name="star.bycenterradiusrays">Star.ByCenterRadiusRays</a>**<br>Fun little node to create star shapes.<br>*Input(s):* NumberOfRays (int - 7), StarOrigin (Point - Point.Origin()), StarRadius (double - 5), RayPercentage (double - 55)<br>*Output(s):* PolyCurve<br>*Nested Custom Node(s):* <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Star.ByCenterRadiusRays.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Star.ByCenterRadiusRays.dyf</a><br>

**<a name="toolkitmeshtomesh">ToolkitMeshToMesh</a>**<br>Attempts to convert a toolkit mesh to a Dynamo mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first.<br>*Input(s):* tkMesh (var)<br>*Output(s):* mesh<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/ToolkitMeshToMesh.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/ToolkitMeshToMesh.dyf</a><br>

**<a name="ln2str">Ln2Str</a>**<br>Serilize a line to a string. You can use a custom delimier  between the coordinates and apply an optional rounding. Works great with Revit text based parameters or Excel.<br>*Input(s):* line (var[]), separator (string - ","), digits (int - null)<br>*Output(s):* string<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#output">Output</a>, <a href="#input">Input</a>, <a href="#python script">Python Script</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Ln2Str.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Ln2Str.dyf</a><br>

**<a name="pt2str">Pt2Str</a>**<br>Serilize a point to a string. You can use a custom delimier  between the coordinates and apply an optional rounding. Works great with Revit text based parameters or Excel.<br>*Input(s):* point (var[]), separator (string - ","), digits (int - null)<br>*Output(s):* string<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#python script">Python Script</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Pt2Str.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Pt2Str.dyf</a><br>

**<a name="str2ln">Str2Ln</a>**<br>De-serilize a Revit parameter string into a geometric line.<br>*Input(s):* str (var), separator (string - ",")<br>*Output(s):* line<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Str2Ln.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Str2Ln.dyf</a><br>

**<a name="str2pt">Str2Pt</a>**<br>De-serilize a Revit parameter string into a geometric point.<br>*Input(s):* str (var), separator (string - ",")<br>*Output(s):* point<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Str2Pt.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Str2Pt.dyf</a><br>

## <a name="revit">Revit</a>
### <a name="revit_collectors">Collectors</a>
**<a name="collector.allelementsof">Collector.AllElementsOf</a>**<br>Works with either categories or types and uses the built in collecotor functions. Can be applied as a function. No ties to the Document.Changed event.<br>*Input(s):* CategoryOrType (var), refresh (bool - true)<br>*Output(s):* elements<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.AllElementsOf.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.AllElementsOf.dyf</a><br>

**<a name="collector.currentselection">Collector.CurrentSelection</a>**<br>Gets the currently selected elements. Connect a boolean switch to refresh the selection.<br>*Input(s):* refresh (bool - true)<br>*Output(s):* element(s)<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.CurrentSelection.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.CurrentSelection.dyf</a><br>

**<a name="collector.elementsketch">Collector.ElementSketch</a>**<br>Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets. Does not work with elements from linked files.<br>*Input(s):* element (var[]), fetchModelCurves (bool - false), refresh (bool - true)<br>*Output(s):* curves, model curves<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.ElementSketch.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.ElementSketch.dyf</a><br>

**<a name="collector.elementsinview">Collector.ElementsInView</a>**<br>Selects all elements visible in the input view.<br>*Input(s):* view (var[]), category (var - null), refresh (bool - true)<br>*Output(s):* element(s)<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.ElementsInView.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.ElementsInView.dyf</a><br>

**<a name="collector.linkedinstanceelements">Collector.LinkedInstanceElements</a>**<br>Extract elements by category from the selected linked instances. The transform CS can be used to get the exact location of the elements in the host file. If an error occurs or the linked document is unloaded, an error will be returned in the elements output and the appropriate transform will be a null. You can use those nulls to filter out the errors.<br>*Input(s):* LinkInstance (var[]), category (Category), refresh (bool - true)<br>*Output(s):* elements, transform<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.LinkedInstanceElements.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.LinkedInstanceElements.dyf</a><br>

**<a name="collector.revisions">Collector.Revisions</a>**<br>Collects all revision clouds from a specific date.<br>*Input(s):* date (string), refresh (bool - true)<br>*Output(s):* matched, all revisions<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.Revisions.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.Revisions.dyf</a><br>

**<a name="collector.sheets">Collector.Sheets</a>**<br>Search for sheets by either their name or their number. Use a false boolean switch to search by number.<br>*Input(s):* searchFor (var[]), NameOrNumber (bool - true), refresh (bool - true)<br>*Output(s):* exact match, partial match<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.Sheets.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.Sheets.dyf</a><br>

**<a name="collector.views">Collector.Views</a>**<br>Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets.<br>*Input(s):* name (var[]), IncludeSchedules (bool - false), refresh (bool - true)<br>*Output(s):* exact match, partial match<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.Views.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Collector.Views.dyf</a><br>

### <a name="revit_color">Color</a>
**<a name="color2decimal">Color2Decimal</a>**<br>Converts a Dynamo colour its Revit equivalent  decimal value.<br>*Input(s):* color (Color)<br>*Output(s):* decimal<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Color2Decimal.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Color2Decimal.dyf</a><br>

**<a name="decimal2color">Decimal2Color</a>**<br>Converts a revit colour decimal value to its Dynamo equivalent.<br>*Input(s):* decimal (var)<br>*Output(s):* color<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Decimal2Color.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Decimal2Color.dyf</a><br>

### <a name="revit_directshape">DirectShape</a>
**<a name="brepshape.bygeometry">BrepShape.ByGeometry</a>**<br>Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Usies the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model.<br>*Input(s):* geometry (var[]), category (var[] - null), name (var[]), material (var[] - null)<br>*Output(s):* DirectShape<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/BrepShape.ByGeometry.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/BrepShape.ByGeometry.dyf</a><br>

**<a name="directshape.bygeometry">DirectShape.ByGeometry</a>**<br>Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces. It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default. The default category is &#xD;&#xA;Generic Models.<br>*Input(s):* geometry (var[]), category (var[] - null), name (var[])<br>*Output(s):* DirectShape<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#output">Output</a>, <a href="#input">Input</a>, <a href="#python script">Python Script</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/DirectShape.ByGeometry.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/DirectShape.ByGeometry.dyf</a><br>

**<a name="directshape.transform">DirectShape.Transform</a>**<br>Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node.<br>*Input(s):* directShape (var), coordSystem (var[])<br>*Output(s):* directShape<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/DirectShape.Transform.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/DirectShape.Transform.dyf</a><br>

**<a name="directshape.translate">DirectShape.Translate</a>**<br>Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy<br>*Input(s):* directShape (var), vector (var[])<br>*Output(s):* directShape<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/DirectShape.Translate.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/DirectShape.Translate.dyf</a><br>

### <a name="revit_document">Document</a>
**<a name="doc.centralpath">Doc.CentralPath</a>**<br>If the document is workshared, the node returns the path to the central document as a string. Otherwise a null value will be returned.<br>*Input(s):* refresh (bool - true)<br>*Output(s):* path<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#doc.centralpath">Doc.CentralPath</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Doc.CentralPath.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Doc.CentralPath.dyf</a><br>

**<a name="doc.copyfromlinkinstance">Doc.CopyFromLinkInstance</a>**<br>The node will use the total transformation of the link instance to copy the input elements into the local document.<br>*Input(s):* LinkInstance (var), element (var[])<br>*Output(s):* local element<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python scrpit">Python Scrpit</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Doc.CopyFromLinkInstance.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Doc.CopyFromLinkInstance.dyf</a><br>

**<a name="doc.deleteelements">Doc.DeleteElements</a>**<br>Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted.<br>*Input(s):* element (var[]), confirm (bool)<br>*Output(s):* count, deletedIds(str), failedIds(str)<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Doc.DeleteElements.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Doc.DeleteElements.dyf</a><br>

### <a name="revit_element">Element</a>
**<a name="element.iscut">Element.IsCut</a>**<br>Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided.<br>*Input(s):* element (var[])<br>*Output(s):* bool, cutter<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Element.IsCut.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Element.IsCut.dyf</a><br>

**<a name="element.iscutting">Element.IsCutting</a>**<br>Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided.<br>*Input(s):* element (var[])<br>*Output(s):* bool, cutElements<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Element.IsCutting.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Element.IsCutting.dyf</a><br>

**<a name="element.removevoidcut">Element.RemoveVoidCut</a>**<br>Removes the void cut between the input elements, if such exists.<br>*Input(s):* elementBeingCut (var), cuttingElement (var[])<br>*Output(s):* uncutCount<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Element.RemoveVoidCut.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Element.RemoveVoidCut.dyf</a><br>

**<a name="element.setlocation">Element.SetLocation</a>**<br>Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements.<br>*Input(s):* element (var[]), location (var[])<br>*Output(s):* element<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#python script">Python Script</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Element.SetLocation.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Element.SetLocation.dyf</a><br>

**<a name="element.unjoin">Element.Unjoin</a>**<br>Unjoins the element(s) in the second list from the primary input element.<br>*Input(s):* firstElement (var), secondElement (var[])<br>*Output(s):* unjoinCount<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Element.Unjoin.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Element.Unjoin.dyf</a><br>

**<a name="nullgetparameter">NullGetParameter</a>**<br>Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow.<br>*Input(s):* element (var), parameter (var)<br>*Output(s):* value<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/NullGetParameter.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/NullGetParameter.dyf</a><br>

**<a name="nullsetparameter">NullSetParameter</a>**<br>Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow.<br>*Input(s):* element (var), parameter (var), value (var)<br>*Output(s):* element<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/NullSetParameter.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/NullSetParameter.dyf</a><br>

### <a name="revit_elementtype">ElementType</a>
**<a name="adaptivefamily.byfacetedgeometry">AdaptiveFamily.ByFacetedGeometry</a>**<br>Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported.<br>*Input(s):* geometry (var[]), familyTemplatePath (var), familyName (var[]), category (var[] - Category.ByName("OST_GenericModel")), materialName (var[] - null), subcategoryName (var[] - null)<br>*Output(s):* type, family<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/AdaptiveFamily.ByFacetedGeometry.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/AdaptiveFamily.ByFacetedGeometry.dyf</a><br>

**<a name="elementtype.duplicate">ElementType.Duplicate</a>**<br>Create duplicate element types. If the type exists, it will be appended instead.<br>*Input(s):* elementType (var[]), newName (var[])<br>*Output(s):* ElementType<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/ElementType.Duplicate.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/ElementType.Duplicate.dyf</a><br>

**<a name="elementtype.instances">ElementType.Instances</a>**<br>Fetches all instances of the input element type<br>*Input(s):* type<br>*Output(s):* instances<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/ElementType.Instances.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/ElementType.Instances.dyf</a><br>

### <a name="revit_familyinstance">FamilyInstance</a>
**<a name="familyinstance.byfacepoints">FamilyInstance.ByFacePoints</a>**<br>Places instances on the input face oriented to the face's U tangent and the global Z axis.<br>*Input(s):* face (var), type (var), point (var[])<br>*Output(s):* familyInstance<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/FamilyInstance.ByFacePoints.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/FamilyInstance.ByFacePoints.dyf</a><br>

**<a name="familyinstance.bygeometry">FamilyInstance.ByGeometry</a>**<br>You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.&#xD;&#xA;The provided category will be used only if the family template supports it. If not, the default template category will be used instead.&#xD;&#xA;Likewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (&quot;By Category&quot;).&#xD;&#xA;For void cuts, the material settings will be ignored.&#xD;&#xA;The Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.&#xD;&#xA;The node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest.<br>*Input(s):* geometry (var[]), familyTemplatePath (var), familyName (var[]), category (var[] - Category.ByName("OST_GenericModel")), materialName (var[] - null), isVoid (var[] - false), subcategoryName (var[] - null)<br>*Output(s):* instance, family<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/FamilyInstance.ByGeometry.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/FamilyInstance.ByGeometry.dyf</a><br>

**<a name="hostedinstance.bypoints">HostedInstance.ByPoints</a>**<br>Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance.<br>*Input(s):* host (var[]), type (var[]), point (var[])<br>*Output(s):* FamilyInstance<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#python script">Python Script</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/HostedInstance.ByPoints.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/HostedInstance.ByPoints.dyf</a><br>

**<a name="viewinstance.bypoint">ViewInstance.ByPoint</a>**<br>Places a view hosted family instance at a given point in the view (e.g. a detail component, 2d annotation).<br>*Input(s):* view (var[]), type (var[]), point (var[])<br>*Output(s):* FamilyInstance<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/ViewInstance.ByPoint.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/ViewInstance.ByPoint.dyf</a><br>

### <a name="revit_form">Form</a>
**<a name="form.bygeometry">Form.ByGeometry</a>**<br>Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default.<br>*Input(s):* geometry (var[]), isVoid (var[] - false)<br>*Output(s):* Form<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Form.ByGeometry.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Form.ByGeometry.dyf</a><br>

### <a name="revit_opening">Opening</a>
**<a name="flooropening.bycurves">FloorOpening.ByCurves</a>**<br>Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves.<br>*Input(s):* host (var[]), curves (var[][])<br>*Output(s):* opening<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/FloorOpening.ByCurves.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/FloorOpening.ByCurves.dyf</a><br>

**<a name="shaft.bycurves">Shaft.ByCurves</a>**<br>Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance.<br>*Input(s):* curves (var[][]), baseLevel (var[]), topLevel (var[])<br>*Output(s):* Opening<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Shaft.ByCurves.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Shaft.ByCurves.dyf</a><br>

### <a name="revit_selection">Selection</a>
**<a name="selectedges">SelectEdges</a>**<br>Select multiple edges from inside the Revit UI. Be sure to press &quot;Finish&quot; once done. You can use a Boolean toggle to refresh your selection.<br>*Input(s):* refresh (bool - true)<br>*Output(s):* edges<br>*Contains Python code!*<br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectEdges.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectEdges.dyf</a><br>

**<a name="selectelements(ordered)">SelectElements(ordered)</a>**<br>Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node.<br>*Input(s):* refresh (bool - true)<br>*Output(s):* elements<br>*Contains Python code!*<br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectElements(ordered).dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectElements(ordered).dyf</a><br>

**<a name="selectfaces+">SelectFaces+</a>**<br>Select multiple faces from inside the Revit UI. Be sure to press &quot;Finish&quot; once done. Unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. You can use a Boolean toggle to refresh your selection.<br>*Input(s):* refresh (bool - true)<br>*Output(s):* faces, pickPoints<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectFaces+.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectFaces+.dyf</a><br>

**<a name="selectinrevit">SelectInRevit</a>**<br>Selects the input elements inside the Revit UI.<br>*Input(s):* element (var[]), reset (bool - true;)<br>*Output(s):* success?<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectInRevit.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectInRevit.dyf</a><br>

**<a name="selectlinkedelement">SelectLinkedElement</a>**<br>Select the linked instance first, followed by the element. If your selection fails, just press escape.&#xD;&#xA;To refresh the node, connect a boolean switch node.<br>*Input(s):* refresh (bool - true)<br>*Output(s):* element<br>*Contains Python code!*<br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectLinkedElement.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectLinkedElement.dyf</a><br>

**<a name="selectlinkedelements">SelectLinkedElements</a>**<br>Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.&#xD;&#xA;To refresh the node, connect a boolean switch node.<br>*Input(s):* refresh (bool - true)<br>*Output(s):* element(s)<br>*Contains Python code!*<br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectLinkedElements.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectLinkedElements.dyf</a><br>

**<a name="selectlinkedelements(ordered)">SelectLinkedElements(ordered)</a>**<br>Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node.<br>*Input(s):* refresh (bool - true)<br>*Output(s):* elements<br>*Contains Python code!*<br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectLinkedElements(ordered).dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectLinkedElements(ordered).dyf</a><br>

**<a name="selectlinkedface">SelectLinkedFace</a>**<br>Select the linked instance first, followed by the face. If your selection fails, just press escape.&#xD;&#xA;To refresh the node, connect a boolean switch node.<br>*Input(s):* refresh (bool - true)<br>*Output(s):* surface<br>*Contains Python code!*<br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectLinkedFace.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/SelectLinkedFace.dyf</a><br>

### <a name="revit_utility">Utility</a>
**<a name="beams.fixextents">Beams.FixExtents</a>**<br>Detects all beams from the input list with broken extents(actual length - cut length &lt;  margin) and attemts to correct them.<br>*Input(s):* beams (var[]), margin (double - 300)<br>*Output(s):* result<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#springs.filter.byclassname">Filter.ByClassName</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Beams.FixExtents.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Beams.FixExtents.dyf</a><br>

**<a name="elements.groupbydistance">Elements.GroupByDistance</a>**<br>You'll need two equal length lists of geometry objects and elements. Splits the list of elements into groups if the distance between the coresponding geometry is less than the provided margin.<br>*Input(s):* elements (var[]), geometry (var[]), margin (double - 10)<br>*Output(s):* elements, points<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Elements.GroupByDistance.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Elements.GroupByDistance.dyf</a><br>

**<a name="errorreport.parse">ErrorReport.Parse</a>**<br>Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set &quot;fetch_elements&quot; to false.<br>*Input(s):* report (var), fetch_elements (bool - true)<br>*Output(s):* error messages, affected elements, unique errors, number of errors<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/ErrorReport.Parse.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/ErrorReport.Parse.dyf</a><br>

**<a name="familytemplatepaths">FamilyTemplatePaths</a>**<br>Fetches the default family template paths<br>*Output(s):* FamilyTemplateFolder, GenericModelTemplate, MassFamilyTemplate<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#list.firstitem">List.FirstItem</a>, <a href="#list.filterbyboolmask">List.FilterByBoolMask</a>, <a href="#directory.contents">Directory.Contents</a>, <a href="#directory.frompath">Directory.FromPath</a>, <a href="#string.contains">String.Contains</a>, <a href="#string">String</a>, <a href="#filepath.filename">FilePath.FileName</a>, <a href="#familytemplatepath">FamilyTemplatePath</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/FamilyTemplatePaths.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/FamilyTemplatePaths.dyf</a><br>

**<a name="filter.bycategoryname">Filter.ByCategoryName</a>**<br>Filters the input elements by their category name. You can input multiple category names.<br>*Input(s):* element (var[]), categoryName (var[])<br>*Output(s):* in, out, nulls<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Filter.ByCategoryName.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Filter.ByCategoryName.dyf</a><br>

**<a name="getrelativelevel">GetRelativeLevel</a>**<br>Select the level closest to the input height from the list of input levels<br>*Input(s):* zHeight (var[]), elevations (var[]), levels (var[]), belowOnly (bool - false)<br>*Output(s):* level<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/GetRelativeLevel.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/GetRelativeLevel.dyf</a><br>

**<a name="interferencecheck.parse">InterferenceCheck.Parse</a>**<br>Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set &quot;fetch_elements&quot; to false.<br>*Input(s):* report (var), fetch_elements (bool - true)<br>*Output(s):* clash categories, affected elements, unique cases, number of clashes<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/InterferenceCheck.Parse.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/InterferenceCheck.Parse.dyf</a><br>

**<a name="revitprocess.emptyworkingset">RevitProcess.EmptyWorkingSet</a>**<br>Use at your own risk! Removes as many pages as possible from the working set of the active Revit session.<br>*Input(s):* object<br>*Output(s):* success<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#output">Output</a>, <a href="#input">Input</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/RevitProcess.EmptyWorkingSet.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/RevitProcess.EmptyWorkingSet.dyf</a><br>

**<a name="scopebox.geometry">ScopeBox.Geometry</a>**<br>Fetches the base curve and solid representation of a scope box element.<br>*Input(s):* scopeBox (var)<br>*Output(s):* polyCurve, solid<br>*Nested Custom Node(s):* <a href="#code block">Code Block</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/ScopeBox.Geometry.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/ScopeBox.Geometry.dyf</a><br>

### <a name="revit_views">Views</a>
**<a name="areaplan.bylevelname">AreaPlan.ByLevelName</a>**<br>Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead.<br>*Input(s):* level (var[]), name (var[]), schemeName (var)<br>*Output(s):* AreaPlan<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/AreaPlan.ByLevelName.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/AreaPlan.ByLevelName.dyf</a><br>

**<a name="doc.activeview">Doc.ActiveView</a>**<br>Selects the current document's active view. Supports more view types than the built-in option.&#xD;&#xA;Will be depreciated once the bult in node works with all plan types.<br>*Input(s):* refresh (bool - true)<br>*Output(s):* view<br>*Contains Python code!*<br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Doc.ActiveView.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Doc.ActiveView.dyf</a><br>

**<a name="sheet.views+">Sheet.Views+</a>**<br>Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).&#xD;&#xA;Will be depreciated once the bult in node works with all plan types.<br>*Input(s):* sheet (var[])<br>*Output(s):* view(s), schedule(s)<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a>, <a href="#code block">Code Block</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/Sheet.Views+.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/Sheet.Views+.dyf</a><br>

**<a name="viewset.byviewsname">ViewSet.ByViewsName</a>**<br>Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it.<br>*Input(s):* views (var[]), setName (var), Overwrite (bool - false)<br>*Output(s):* result<br>*Contains Python code!*<br>*Nested Custom Node(s):* <a href="#python script">Python Script</a>, <a href="#input">Input</a>, <a href="#output">Output</a><br>*Link to file:* <a href="https://github.com/dimven/SpringNodes/tree/master/Nodes/ViewSet.ByViewsName.dyf">https://github.com/dimven/SpringNodes/tree/master/Nodes/ViewSet.ByViewsName.dyf</a><br>

