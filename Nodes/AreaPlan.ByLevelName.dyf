<Workspace Version="1.3.1.1736" X="121.600023453145" Y="83.480649892069" zoom="1.27771698410772" ScaleFactor="1" Name="Springs.AreaPlan.ByLevelName" Description="Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead." ID="1e945ccb-531f-4888-9a76-fc0125ed5c63" Category="Springs.Revit.Views">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="2cd73597-6cbc-4f6d-bd28-1ad2855dfa57" type="PythonNodeModels.PythonNode" nickname="Python Script" x="183.631624957056" y="-1.25223349137627" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>import clr

clr.AddReference('RevitServices')
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference('RevitNodes')
import Revit
clr.ImportExtensions(Revit.Elements)

clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *

def tolist(obj1):
	if hasattr(obj1,'__iter__') : return obj1
	else : return [obj1]

def first(obj1):
	if hasattr(obj1,'__iter__'): return obj1[0]
	else: return obj1

	
lvls = UnwrapElement(tolist(IN[0]) )
names = tolist(IN[1])
plan_type = str(first(IN[2]) )

#fail_str = 'view with same name exists'
vt1 = None # fetch the area plan type
fec1 = FilteredElementCollector(doc).OfClass(ViewFamilyType)
for f in fec1:
	if Element.Name.__get__(f) == plan_type :
		vt1 = f.Id
		break

fec2 = FilteredElementCollector(doc).OfClass(View) #get existing area plans
plan_names = [f.Name for f in fec2 if f.GetTypeId().Equals(vt1)]

as1 = None #get the scheme
fec3 = FilteredElementCollector(doc).OfClass(AreaScheme)
for f in fec3:
	if f.Name == plan_type :
		as1 = f.Id
		break

if as1 != None:
	OUT = []
	TransactionManager.Instance.EnsureInTransaction(doc)
	for l, n in zip(lvls, names):
		if n not in plan_names:
			v1 = ViewPlan.CreateAreaPlan(doc, as1, l.Id)
			v1.Name = n
			OUT.append(v1.ToDSType(False) )
		else : OUT.append(None) #could use fail_str but filtering nulls is easier
	TransactionManager.Instance.TransactionTaskDone()

else : OUT = 'Area scheme with that name not found.'</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="5691bdad-d29f-4b68-bf2e-1d4de760f73e" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="0" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="level:var[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="446a92a1-1049-41d7-b465-ef4147eef18f" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="5.83090587457156" y="62.087880660306" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="name:var[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="f0ccf3d2-29e0-4659-b3bb-77735666c62f" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-32.5195195202302" y="120.223205683105" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="schemeName:var" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="efd15a33-a001-4068-a222-5a85577f459f" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="338.35121926751" y="-1.25223349137627" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="AreaPlan" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="2cd73597-6cbc-4f6d-bd28-1ad2855dfa57" start_index="0" end="efd15a33-a001-4068-a222-5a85577f459f" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="5691bdad-d29f-4b68-bf2e-1d4de760f73e" start_index="0" end="2cd73597-6cbc-4f6d-bd28-1ad2855dfa57" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="446a92a1-1049-41d7-b465-ef4147eef18f" start_index="0" end="2cd73597-6cbc-4f6d-bd28-1ad2855dfa57" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f0ccf3d2-29e0-4659-b3bb-77735666c62f" start_index="0" end="2cd73597-6cbc-4f6d-bd28-1ad2855dfa57" end_index="2" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="81.9612025848931" eyeY="60.6141246867221" eyeZ="62.2681174153678" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>