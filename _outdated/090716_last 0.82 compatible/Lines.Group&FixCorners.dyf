<Workspace Version="0.8.2.2392" X="-120.548119971669" Y="205.840051051185" zoom="1.78359936238281" Name="Lines.Group&amp;FixCorners" Description="Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net." ID="26b8a3c9-b4e6-4da4-a27c-6162f91a43b3" Category="SpringNodes.Geometry">
  <NamespaceResolutionMap>
    <ClassMap partialName="List" resolvedName="DSCore.List" assemblyName="DSCoreNodes.dll" />
    <ClassMap partialName="Point" resolvedName="Autodesk.DesignScript.Geometry.Point" assemblyName="ProtoGeometry.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <DSIronPythonNode.PythonNode guid="805021bd-c64b-486c-9dbb-8216ece7a1a5" type="DSIronPythonNode.PythonNode" nickname="Python Script" x="250" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" inputcount="2">
      <Script>#Copyright(c) 2016, Dimitar Venkov
# @5devene, dimitar.ven@gmail.com
#Inspired from the "Group Curves" node by Konrad Sobon
# @arch_laboratory, http://archi-lab.net

import clr

clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

inputCurves = IN[0]
original = inputCurves[:]
margin = IN[1]

#join/group curves function
def groupCurves(cl1,ignore_dist):
	def ends(l1): return l1.StartPoint, l1.EndPoint
	Grouped_Lines, Queue = [], set()
	while cl1:
		Shape = []
		Queue.add(cl1.pop()) # Move a line from the cl1 to our queue
		while Queue:
			l1 = Queue.pop()
			Shape.append(l1)
			for i in xrange(len(cl1) ):
				dist1 = [p1.DistanceTo(p2) for p2 in ends(l1)\
				for p1 in ends(cl1[i])]
				if any(d &lt;= ignore_dist for d in dist1):
					Queue.add(cl1[i])
			cl1 = [i for i in cl1 if i not in Queue]
		Grouped_Lines.append(Shape)
	return Grouped_Lines

def CountTrue(l1):
	n = 0
	for i in l1: n += 1 if i else 0
	return n
	
def OrderCurves(cl0,cl1):
	xr1 =  xrange(len(cl1))
	test1 = [[cl1[i].DoesIntersect(cl1[j]) for j in xr1 if j != i] for i in xr1]
	countT = map(CountTrue, test1)
	if 1 in countT and countT[0] != 1 :
		n = countT.index(1)
		cl0[0],cl0[n] = cl0[n],cl0[0]
		cl1[0],cl1[n] = cl1[n],cl1[0]
	return cl0,cl1

def FarPt(l1, p1):
	pts = (l1.StartPoint,l1.EndPoint)
	return max(pts, key = p1.DistanceTo)

def ClosedCase(cl0,cl1):
	pts = [cl1[i-1].Intersect(cl1[i])[0] for i in xrange(len(cl1) )]
	return PolyCurve.ByPoints(pts,True).Curves()

def OpenCase(cl0,cl1):
	pts = [cl1[i].Intersect(cl1[i+1])[0] for i in xrange(len(cl1) -1)]
	pts.append(FarPt(cl0[-1],pts[-1]))
	pts.insert(0,FarPt(cl0[0],pts[0]))
	return PolyCurve.ByPoints(pts).Curves()

def joinCurves(Clist1,th1):
	if len(Clist1) &lt; 2 : return Clist1
	else:
		Clist2 = [c.ExtendStart(th1).ExtendEnd(th1) for c in Clist1]
		Clist1, Clist2 = OrderCurves(Clist1,Clist2)
		isClosed = Clist2[0].DoesIntersect(Clist2[-1]) and len(Clist2) &gt; 2
		fn1 = ClosedCase if isClosed else OpenCase
		try : return fn1(Clist1,Clist2)
		except : return Clist1
		
def ReorderCurves(orig, new):
	reordered = []
	app1, pop1, PaP = reordered.append, new.pop, Curve.PointAtParameter
	for i in xrange(len(orig) ):
		p1 = PaP(orig[i],0.5)
		p2 = [PaP(new[i],0.5) for i in xrange(len(new) )]
		ind1 = p2.index(min(p2, key = p1.DistanceTo) )
		app1(pop1(ind1) )
	return reordered

def Flatten(x):
    if hasattr(x, "__iter__"):
        return [a for i in x for a in Flatten(i)]
    else : return [x]

def output1(l1):
	if len(l1) == 1: return l1[0]
	else: return l1

_grouped = groupCurves(inputCurves,margin)
out1 = output1([joinCurves(gc, margin) for gc in _grouped])
OUT = ReorderCurves(original,Flatten(out1)), out1</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.Symbol guid="52647745-ee6a-4aea-b503-8a776252625d" type="Dynamo.Nodes.Symbol" nickname="Input" x="78.4" y="-9.60000000000002" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True">
      <Symbol value="lines:var[]" />
    </Dynamo.Nodes.Symbol>
    <Dynamo.Nodes.Symbol guid="ab745be1-16a8-440f-b703-2bb8ac191d33" type="Dynamo.Nodes.Symbol" nickname="Input" x="86.5706244224178" y="53.75402376239" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True">
      <Symbol value="margin:var" />
    </Dynamo.Nodes.Symbol>
    <Dynamo.Nodes.Output guid="6f4ff00c-f3cf-4b1c-8951-c6035e6709af" type="Dynamo.Nodes.Output" nickname="Output" x="531.259273366399" y="-23.4795762862329" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False">
      <Symbol value="lines(original order)" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.CodeBlockNodeModel guid="274c3fa4-72b0-480d-be44-36ce5e736c54" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="398.049591151724" y="5.65052964220894" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" CodeText="l[0];&#xA;l[1];" ShouldFocus="false" />
    <Dynamo.Nodes.Output guid="8a6e9a10-129f-448d-97e9-035fffb1446a" type="Dynamo.Nodes.Output" nickname="Output" x="535.330589104175" y="37.1456885348716" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False">
      <Symbol value="lines(grouped)" />
    </Dynamo.Nodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="805021bd-c64b-486c-9dbb-8216ece7a1a5" start_index="0" end="274c3fa4-72b0-480d-be44-36ce5e736c54" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="52647745-ee6a-4aea-b503-8a776252625d" start_index="0" end="805021bd-c64b-486c-9dbb-8216ece7a1a5" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="ab745be1-16a8-440f-b703-2bb8ac191d33" start_index="0" end="805021bd-c64b-486c-9dbb-8216ece7a1a5" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="274c3fa4-72b0-480d-be44-36ce5e736c54" start_index="0" end="6f4ff00c-f3cf-4b1c-8951-c6035e6709af" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="274c3fa4-72b0-480d-be44-36ce5e736c54" start_index="1" end="8a6e9a10-129f-448d-97e9-035fffb1446a" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="background_preview" eyeX="24152.2487842572" eyeY="142190.347495358" eyeZ="159.140163069671" lookX="394.915426577511" lookY="-140712.109617949" lookZ="-22624.6874392886" />
  </Cameras>
</Workspace>